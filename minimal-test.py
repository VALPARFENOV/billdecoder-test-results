#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Hathr API —Å –æ–¥–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
"""

import json
import requests
import time

def test_single_document():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–æ–º—Ç–æ–º"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (—Ä–∞–±–æ—á–∏–µ –∫–ª—é—á–∏ –∏–∑ test2.sh)
    client_id = "4vau54clia0s5esf9ahojcn7kv"
    client_secret = "i0n0t1kbihsl44tbjsvbkhml865ln8d2p4bq9afrp649km3jidq"
    scope = "hathr/llm"
    token_url = "https://hathr.auth-fips.us-gov-west-1.amazoncognito.com/oauth2/token"
    api_url = "https://api.hathr.ai/v1/chat"
    
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token_data = {
        "grant_type": "client_credentials",
        "client_id": client_id,
        "client_secret": client_secret,
        "scope": scope
    }
    
    token_response = requests.post(token_url, data=token_data)
    
    if token_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {token_response.status_code} - {token_response.text}")
        return
    
    access_token = token_response.json()["access_token"]
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(access_token)})")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    print("\nüìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    try:
        with open("test-data/bills/bill_001_simple.json", 'r', encoding='utf-8') as f:
            bill_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª test-data/bills/bill_001_simple.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–º—Ç–∞
    document_text = f"""
MEDICAL BILL

Provider: {bill_data['provider']['name']}
Patient: {bill_data['patient']['name']}
Service Date: {bill_data['service_date']}

Services:
"""
    for service in bill_data.get("services", []):
        document_text += f"""
Code: {service['code']}
Description: {service['description']}
Charge: ${service['charge']}
"""
    
    document_text += f"""
Total Charges: ${bill_data['financial_summary']['total_charges']}
Insurance Payment: ${bill_data['financial_summary']['insurance_payment']}
Patient Responsibility: ${bill_data['financial_summary']['patient_responsibility']}
"""
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompt = """Classify this healthcare document and extract key metadata:

Document types to identify:
- Medical bill/invoice
- EOB (Explanation of Benefits)
- Lab results
- Imaging reports
- Insurance correspondence
- Provider statements

Extract:
- Document type
- Date of service
- Provider name
- Patient identifier (redacted)
- Key services/tests mentioned
- Urgency level (routine/urgent/emergency)"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"{prompt}\n\n[DOCUMENT]\n{document_text}"
    
    print("\nü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hathr API...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    payload = {
        "messages": [
            {"role": "user", "text": message}
        ],
        "temperature": 0.2,
        "topP": 1.0
    }
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    start_time = time.time()
    response = requests.post(api_url, json=payload, headers=headers)
    response_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if response.status_code == 200:
        response_data = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(response_data.keys())}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if "response" in response_data and "text" in response_data["response"]:
            ai_response = response_data["response"]["text"]
            print(f"\nü§ñ –û—Ç–≤–µ—Ç AI:")
            print("-" * 50)
            print(ai_response)
            print("-" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            if "usage" in response_data["response"]:
                usage = response_data["response"]["usage"]
                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
                print(f"   –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('inputTokens', 'N/A')}")
                print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('outputTokens', 'N/A')}")
                print(f"   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('totalTokens', 'N/A')}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {response_data}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")

if __name__ == "__main__":
    test_single_document()
