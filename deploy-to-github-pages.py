#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ GitHub Pages
"""

import os
import subprocess
import json
from pathlib import Path

def check_git_installed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git"""
    try:
        subprocess.run(["git", "--version"], capture_output=True, check=True)
        return True
    except:
        return False

def init_git_repo():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    if not check_git_installed():
        print("‚ùå Git is not installed. Please install Git first.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if Path(".git").exists():
        print("‚úÖ Git repository already exists")
        return True
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try:
        subprocess.run(["git", "init"], check=True)
        print("‚úÖ Git repository initialized")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Failed to initialize Git repository")
        return False

def create_github_pages_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è GitHub Pages"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é docs (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è GitHub Pages)
    docs_dir = Path("docs")
    docs_dir.mkdir(exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    import shutil
    
    files_to_copy = [
        ("test-results/web-presentation-english.html", "docs/index.html"),
        ("test-results/README_English_Presentation.md", "docs/README.md"),
        ("test-results/English_Presentation_Summary.md", "docs/SUMMARY.md")
    ]
    
    for src, dst in files_to_copy:
        if Path(src).exists():
            shutil.copy2(src, dst)
            print(f"‚úÖ Copied: {src} ‚Üí {dst}")
        else:
            print(f"‚ö†Ô∏è  Not found: {src}")
    
    # –°–æ–∑–¥–∞–µ–º .nojekyll —Ñ–∞–π–ª (—á—Ç–æ–±—ã GitHub –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –∫–∞–∫ Jekyll)
    nojekyll_file = Path("docs/.nojekyll")
    nojekyll_file.touch()
    print("‚úÖ Created .nojekyll file")
    
    return True

def create_deployment_instructions():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é"""
    
    instructions = """# üöÄ Deploy to GitHub Pages

## Quick Deploy (Recommended)

1. **Create GitHub Repository:**
   - Go to https://github.com/new
   - Repository name: `billdecoder-test-results`
   - Make it public
   - Don't initialize with README

2. **Push to GitHub:**
   ```bash
   git add .
   git commit -m "Add BillDecoder test results presentation"
   git branch -M main
   git remote add origin https://github.com/YOUR_USERNAME/billdecoder-test-results.git
   git push -u origin main
   ```

3. **Enable GitHub Pages:**
   - Go to repository Settings
   - Scroll to "Pages" section
   - Source: "Deploy from a branch"
   - Branch: "main" / "docs"
   - Save

4. **Access Your Presentation:**
   - URL: `https://YOUR_USERNAME.github.io/billdecoder-test-results`
   - Share this URL with colleagues!

## Alternative: Firebase Hosting

1. **Install Firebase CLI:**
   ```bash
   npm install -g firebase-tools
   ```

2. **Initialize Firebase:**
   ```bash
   cd docs
   firebase init hosting
   # Select docs folder as public directory
   ```

3. **Deploy:**
   ```bash
   firebase deploy
   ```

4. **Get URL:**
   - Firebase will provide a public URL
   - Share with colleagues!

## Manual Upload

If you prefer manual upload:
1. Zip the `docs` folder
2. Upload to any web hosting service
3. Share the URL

---
*Generated by BillDecoder testing system*
"""
    
    with open("DEPLOY_INSTRUCTIONS.md", 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print("‚úÖ Created DEPLOY_INSTRUCTIONS.md")

def create_firebase_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Firebase"""
    
    firebase_config = {
        "hosting": {
            "public": "docs",
            "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
            ],
            "rewrites": [
                {
                    "source": "**",
                    "destination": "/index.html"
                }
            ]
        }
    }
    
    with open("firebase.json", 'w', encoding='utf-8') as f:
        json.dump(firebase_config, f, indent=2)
    
    print("‚úÖ Created firebase.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Preparing BillDecoder presentation for GitHub Pages / Firebase")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    if not Path("test-results/web-presentation-english.html").exists():
        print("‚ùå English presentation not found!")
        print("Run: python3 generate-english-presentation.py")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git
    if not init_git_repo():
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è GitHub Pages
    if not create_github_pages_structure():
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase
    create_firebase_config()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    create_deployment_instructions()
    
    print("\nüéâ Ready for deployment!")
    print("\nüìã Next steps:")
    print("1. üìñ Read DEPLOY_INSTRUCTIONS.md for detailed steps")
    print("2. üåê Create GitHub repository")
    print("3. üì§ Push to GitHub")
    print("4. ‚öôÔ∏è  Enable GitHub Pages in repository settings")
    print("5. üîó Share the public URL with colleagues!")
    
    print(f"\nüìÅ Files ready in 'docs' folder:")
    print(f"   - index.html (main presentation)")
    print(f"   - README.md (instructions)")
    print(f"   - SUMMARY.md (summary)")
    print(f"   - .nojekyll (GitHub Pages config)")
    
    print(f"\nüî• Firebase config created:")
    print(f"   - firebase.json (Firebase hosting config)")
    
    print(f"\nüí° Quick commands:")
    print(f"   git add .")
    print(f"   git commit -m 'Add BillDecoder test results'")
    print(f"   git push origin main")

if __name__ == "__main__":
    main()
