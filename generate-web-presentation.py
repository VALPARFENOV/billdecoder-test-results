#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import os
from datetime import datetime

def load_test_results():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_dir = "test-results"
    json_files = [f for f in os.listdir(results_dir) if f.startswith("compact_test_") and f.endswith(".json")]
    
    if not json_files:
        print("‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return None
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_file = sorted(json_files)[-1]
    file_path = os.path.join(results_dir, latest_file)
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {latest_file}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def generate_web_presentation(test_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JavaScript
    js_data = json.dumps(test_data, ensure_ascii=False, indent=2)
    
    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω HTML
    with open("test-results/web-presentation.html", 'r', encoding='utf-8') as f:
        html_template = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    html_content = html_template.replace(
        'const testData = { /* –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã */ };',
        f'const testData = {js_data};'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    session_id = test_data.get('session_id', 'unknown')
    timestamp = test_data.get('test_timestamp', '')
    
    if timestamp:
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            formatted_date = dt.strftime('%d.%m.%Y %H:%M')
        except:
            formatted_date = timestamp
    else:
        formatted_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    html_content = html_content.replace(
        '<p style="font-size: 0.9em; margin-top: 10px;">Session ID: 6e44d4e6-c09a-4e0d-943c-f3bc7580fe81 | –î–∞—Ç–∞: 30 —Å–µ–Ω—Ç—è–±—Ä—è 2025</p>',
        f'<p style="font-size: 0.9em; margin-top: 10px;">Session ID: {session_id} | –î–∞—Ç–∞: {formatted_date}</p>'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tests = test_data.get('total_tests', 0)
    successful_tests = test_data.get('successful_tests', 0)
    success_rate = test_data.get('success_rate', 0) * 100
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    avg_time = 0
    total_tokens = 0
    
    if test_data.get('results'):
        total_time = sum(result.get('response_time', 0) for result in test_data['results'])
        avg_time = total_time / len(test_data['results']) if test_data['results'] else 0
        total_tokens = sum(result.get('metrics', {}).get('total_tokens', 0) for result in test_data['results'])
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    html_content = html_content.replace(
        '<div class="stat-number">45</div>',
        f'<div class="stat-number">{total_tests}</div>'
    )
    html_content = html_content.replace(
        '<div class="stat-number">100%</div>',
        f'<div class="stat-number">{success_rate:.0f}%</div>'
    )
    html_content = html_content.replace(
        '<div class="stat-number">9.1—Å</div>',
        f'<div class="stat-number">{avg_time:.1f}—Å</div>'
    )
    html_content = html_content.replace(
        '<div class="stat-number">40K</div>',
        f'<div class="stat-number">{total_tokens//1000}K</div>'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
    output_file = "test-results/web-presentation-with-data.html"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return output_file

def generate_detailed_report(test_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    
    report_file = "test-results/detailed-analysis.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write("## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- **Session ID:** {test_data.get('session_id', 'unknown')}\n")
        f.write(f"- **–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {test_data.get('test_timestamp', 'unknown')}\n")
        f.write(f"- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {test_data.get('total_tests', 0)}\n")
        f.write(f"- **–£—Å–ø–µ—à–Ω—ã—Ö:** {test_data.get('successful_tests', 0)}\n")
        f.write(f"- **–ù–µ—É–¥–∞—á–Ω—ã—Ö:** {test_data.get('failed_tests', 0)}\n")
        f.write(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {test_data.get('success_rate', 0)*100:.1f}%\n\n")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        f.write("## üìÑ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n")
        
        doc_types = {}
        for result in test_data.get('results', []):
            doc_type = result.get('document_type', 'unknown')
            if doc_type not in doc_types:
                doc_types[doc_type] = {
                    'total': 0, 'successful': 0, 'total_time': 0, 'total_tokens': 0,
                    'files': set(), 'prompts': set()
                }
            
            doc_types[doc_type]['total'] += 1
            if result.get('success', False):
                doc_types[doc_type]['successful'] += 1
            doc_types[doc_type]['total_time'] += result.get('response_time', 0)
            doc_types[doc_type]['total_tokens'] += result.get('metrics', {}).get('total_tokens', 0)
            doc_types[doc_type]['files'].add(result.get('document_file', '').split('/')[-1])
            doc_types[doc_type]['prompts'].add(result.get('prompt_type', ''))
        
        for doc_type, stats in doc_types.items():
            success_rate = stats['successful'] / stats['total'] * 100 if stats['total'] > 0 else 0
            avg_time = stats['total_time'] / stats['total'] if stats['total'] > 0 else 0
            
            f.write(f"### {doc_type.upper()}\n")
            f.write(f"- **–¢–µ—Å—Ç–æ–≤:** {stats['total']}\n")
            f.write(f"- **–£—Å–ø–µ—à–Ω—ã—Ö:** {stats['successful']} ({success_rate:.1f}%)\n")
            f.write(f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:** {avg_time:.2f}—Å\n")
            f.write(f"- **–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {stats['total_tokens']}\n")
            f.write(f"- **–§–∞–π–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {len(stats['files'])}\n")
            f.write(f"- **–ü—Ä–æ–º—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {len(stats['prompts'])}\n\n")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–º—Ç–æ–≤
        f.write("## ü§ñ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–º—Ç–æ–≤\n\n")
        
        prompt_types = {}
        for result in test_data.get('results', []):
            prompt_type = result.get('prompt_type', 'unknown')
            if prompt_type not in prompt_types:
                prompt_types[prompt_type] = {
                    'total': 0, 'successful': 0, 'total_time': 0, 'total_tokens': 0,
                    'doc_types': set()
                }
            
            prompt_types[prompt_type]['total'] += 1
            if result.get('success', False):
                prompt_types[prompt_type]['successful'] += 1
            prompt_types[prompt_type]['total_time'] += result.get('response_time', 0)
            prompt_types[prompt_type]['total_tokens'] += result.get('metrics', {}).get('total_tokens', 0)
            prompt_types[prompt_type]['doc_types'].add(result.get('document_type', ''))
        
        for prompt_type, stats in prompt_types.items():
            success_rate = stats['successful'] / stats['total'] * 100 if stats['total'] > 0 else 0
            avg_time = stats['total_time'] / stats['total'] if stats['total'] > 0 else 0
            
            f.write(f"### {prompt_type.replace('_', ' ').title()}\n")
            f.write(f"- **–¢–µ—Å—Ç–æ–≤:** {stats['total']}\n")
            f.write(f"- **–£—Å–ø–µ—à–Ω—ã—Ö:** {stats['successful']} ({success_rate:.1f}%)\n")
            f.write(f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:** {avg_time:.2f}—Å\n")
            f.write(f"- **–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {stats['total_tokens']}\n")
            f.write(f"- **–¢–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {', '.join(stats['doc_types'])}\n\n")
        
        # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
        f.write("## üí¨ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ AI\n\n")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–º—Ç–∞
        examples_shown = set()
        for result in test_data.get('results', []):
            prompt_type = result.get('prompt_type', '')
            if prompt_type not in examples_shown and result.get('success', False):
                examples_shown.add(prompt_type)
                
                f.write(f"### {prompt_type.replace('_', ' ').title()}\n")
                f.write(f"**–§–∞–π–ª:** {result.get('document_file', '').split('/')[-1]}\n")
                f.write(f"**–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {result.get('response_time', 0):.2f}—Å\n")
                f.write(f"**–¢–æ–∫–µ–Ω—ã:** {result.get('metrics', {}).get('total_tokens', 0)}\n\n")
                f.write("**–û—Ç–≤–µ—Ç AI:**\n")
                f.write("```\n")
                f.write(result.get('response_text', '')[:500] + ('...' if len(result.get('response_text', '')) > 500 else ''))
                f.write("\n```\n\n")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f.write("## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
        f.write("### ‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:\n")
        f.write("- 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤\n")
        f.write("- –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º—Ç–æ–≤\n")
        f.write("- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ AI\n")
        f.write("- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º HIPAA\n\n")
        
        f.write("### üìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n")
        f.write("- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n")
        f.write("- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–æ–º—Ç–æ–≤\n")
        f.write("- –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n")
        f.write("- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n")
        
        f.write("### üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:\n")
        f.write("**–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£** ‚úÖ\n")
        f.write("- –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")
        f.write("- –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n")
        f.write("- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞\n")
        f.write("- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∞\n")
    
    return report_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = load_test_results()
    if not test_data:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    web_file = generate_web_presentation(test_data)
    print(f"‚úÖ –í–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {web_file}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report_file = generate_detailed_report(test_data)
    print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª {web_file} –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")
    print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–∞–π–ª–µ {report_file}")

if __name__ == "__main__":
    main()
